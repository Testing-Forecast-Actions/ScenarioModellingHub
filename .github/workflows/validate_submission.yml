name: Validate Submission
on:
  workflow_dispatch:
  # pull_request_target:
  #   branches:
  #     - main

  #   paths:
  #     - 'model-output/**'
  #     - 'model-metadata/*'
  #     - '!**README**'
  #     - '!**.md'
  #     - '!**.MD'

jobs:
    validate-submission_job:
        runs-on: ubuntu-latest
        outputs:
          changed_files: ${{ steps.get_changed_files.outputs.all_changed_files }}

        steps:
        - name: Checkout repository
          uses: actions/checkout@v3
          with:
            ref: ${{ github.event.pull_request.head.sha }}
            fetch-depth: 1

        # Get changes from pull request for later use
        # --------------------------------------------      
        - name: Get changes
          id: get_changed_files
          uses: tj-actions/changed-files@v46.0.1

        
        # DEBUG ONLY
        - name: List all changed files
          run: |
            for file in ${{ steps.get_changed_files.outputs.all_changed_files }}; do
              echo "$file was changed"
            done

        # TEST ONLY -----------------------------------
        - uses: r-lib/actions/setup-r@v2
          with:
            install-r: false
            use-public-rspm: true


        # Install System dependencies
        - name: Install system dependencies
          run: |
            sudo apt-get update
            sudo apt-get install libcurl4-openssl-dev libv8-dev

        # Install R Packages 
        - name: Install R packages
          run: |
            install.packages("pak")
            # install.packages("arrow", repos = c("https://apache.r-universe.dev", "https://cran.r-project.org"))
            # install.packages("remotes")
            
          shell: Rscript {0}


        # - name: Install hubAdmin
        #   run: |
        #     env_path <- Sys.getenv("GITHUB_PAT")
        #     print("TRACE")
        #     print(env_path)
        #     print("TRACE_END")
        #     Sys.unsetenv("GITHUB_PAT")
        #     pak::pkg_install("Infectious-Disease-Modeling-Hubs/hubAdmin@feature/sample-support")
        #   shell: Rscript {0}


        # Install packages from Hubverse
        - name: Install hubAdmin
          run: |
            pak::pkg_install("Infectious-Disease-Modeling-Hubs/hubAdmin@feature/sample-support")
            pak::pkg_install("Infectious-Disease-Modeling-Hubs/hubData@feature/handle-samples")
            pak::pkg_install("Infectious-Disease-Modeling-Hubs/hubValidations@feature/handle-samples")
            pak::pkg_install("Infectious-Disease-Modeling-Hubs/hubUtils@enhancement/v3-utils")
          shell: Rscript {0}


        # validate hub configurations
        - name: Run hub config validations
          run: |
            library("hubAdmin")
            v <- hubAdmin::validate_hub_config(hub_path = ".", branch = "br-v3.0.0", schema_version = "latest")
          shell: Rscript {0}


        - name: trace input
          env:
            files: ${{ steps.get_changed_files.outputs.all_changed_files }}
            PR_NUMBER: ${{ github.event.number }}
          run: |
            print("files:")
            for(file in $files)
              print (file)

            print("pr number")
            print($PR_NUMBER)
              

        # Validate data submission
        - name: Run validations
          env:
            files: ${{ steps.get_changed_files.outputs.all_changed_files }}
            PR_NUMBER: ${{ github.event.number }}
          run: |
            library("hubValidations")             
                        
            for(file in $files) {
              print("Running validation") 
              print(file)
              v <- validate_submission(
                  gh_repo = Sys.getenv("GITHUB_REPOSITORY"),
                  pr_number = Sys.getenv("PR_NUMBER"),
                  skip_check_config = TRUE
              )
              print("ERRORS:")
              print(v)
              hubValidations::check_for_errors(v, verbose = TRUE)
            }
          shell: Rscript {0}

        # TEST_ONLY END ---------------------------------

        # - name: Setup R
        #   uses: r-lib/actions/setup-r@v2

        # - name: Install system dependencies
        #   run: sudo apt-get install libcurl4-openssl-dev libudunits2-dev libgdal-dev


        # - name: Cache R packages
        #   id: cache
        #   if: runner.os != 'Windows'
        #   uses: actions/cache@v2
        #   with:
        #     path: ${{ env.R_LIBS_USER }}
        #     key: ${{ runner.os }}-${{ hashFiles('.github/requirements.txt') }}-1

        # - name: Install dependencies
        #   if: steps.cache.outputs.cache-hit != 'true'
        #   run: |
        #     R -e 'Sys.setenv("NOT_CRAN" = TRUE)
        #           install.packages(c("arrow", "gh", "remotes"))
        #           Sys.unsetenv("NOT_CRAN")
        #           remotes::install_url("https://github.com/midas-network/SMHvalidation/archive/refs/heads/main.zip")
        #           remotes::install_url("https://github.com/Infectious-Disease-Modeling-Hubs/hubUtils/archive/refs/heads/main.zip")'
        #   env:
        #     GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

        # - name: Run Validation
        #   run: |
        #     Rscript code/validation/validation.R
        #   env:
        #     GH_PR_NUMBER: ${{ github.event.pull_request.number }}
        #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


        # Eventually comment on it
        - name: Comment PR
          uses: thollander/actions-comment-pull-request@v2
          with:
            message: |
              All validation checks completed successfully.
            pr_number: ${{ github.event.pull_request.number }}


        # Approve pull request 
        # ---------------------------
        - name: Approve Pull Request
          uses: juliangruber/approve-pull-request-action@v2.0.0
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            number: ${{ github.event.pull_request.number }}


        # And then merge it
        # ---------------------------
        - name: Merge the pull request
          id: merge_pr
          run: |
            echo ">>> Merging PR URL: ${{ github.event.pull_request.html_url }}"
            gh pr merge --auto --squash $PR_URL
          env:
            PR_URL: ${{ github.event.pull_request.html_url }}
            GH_TOKEN: ${{ github.token }}


    call-persisting-wf:
      needs: validate-submission_job
      uses: Testing-Forecast-Actions/ScenarioModellingHub/.github/workflows/persist_changes.yml@main
      with:
        changes-list: ${{ needs.validate-submission_job.outputs.changed_files }}
  
      secrets:
        envPAT: ${{ secrets.GITHUB_TOKEN }}
